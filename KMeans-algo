package faraazprojects;

import java.io.BufferedReader;
import java.io.InputStreamReader;

public class KMeans {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        System.out.println("Enter k value: ");
        int k = Integer.parseInt(br.readLine());
        
        System.out.println("How many tuples?");
        int numTuples = Integer.parseInt(br.readLine());
        
        int[][] data = new int[numTuples][2];
        
        for (int i = 0; i < numTuples; i++) {
            System.out.println("Enter " + i + "th height and weight (comma separated):");
            String tuple[] = br.readLine().split(",");
            
            int height = Integer.parseInt(tuple[0]);
            int weight = Integer.parseInt(tuple[1]);
            
            data[i][0] = height;
            data[i][1] = weight;
        }
        
        int centroids[][] = new int[k][2];
        String clusters[] = new String[k];
        
        for (int i = 0; i < k; i++) {
            System.out.println("Enter " + i + "th random index: ");
            int randomIndex = Integer.parseInt(br.readLine());
            
            clusters[i] = randomIndex + ",";
            
            centroids[i][0] = data[randomIndex][0];
            centroids[i][1] = data[randomIndex][1];
        }
        
        //1st iteration
        for (int i = 0; i < numTuples; i++) {
            
        }
    }
    
    public static int calculateMinDistanceIndex(int[][] centroids, int[] dataTuple, int k) {
        double minDistance = Double.MAX_VALUE;
        int minIndex = 0;
        
        for (int i = 0; i < k; i++) {
            int x1 = dataTuple[0];
            int y1 = dataTuple[1];
            
            int x2 = centroids[i][0];
            int y2 = centroids[i][1];
            
            double distance = Math.sqrt(((x2 - x1)*(x2 - x1))+((y2 - y1)*(y2 - y1)));
            if(distance < minDistance) {
                minDistance = distance;
                minIndex = i;
            }
        }
        return minIndex;
    }
    
}
